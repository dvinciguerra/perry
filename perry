#!/usr/bin/env bash
set -uo pipefail

debug_level="${PERRY_DEBUG:-0}";
log_level="${PERRY_LOG:-INFO}";
# log_level="INFO"
session_uuid=""
default_branch="master"

# validate default branch name
if git branch --all | grep -q -E '^\*?\s*main$'; then
  default_branch="main"
fi

# Print a log message
# @param [String] log_level
# @param [String] message
log() {
  # extracted from Zordrak/bashlog (for credits)
  # https://github.com/Zordrak/bashlog/blob/master/log.sh
  local -A severities
  severities['DEBUG']=7
  severities['INFO']=6
  severities['NOTICE']=5 # Unused
  severities['WARN']=4
  severities['ERROR']=3
  severities['CRIT']=2   # Unused
  severities['ALERT']=1  # Unused
  severities['EMERG']=0  # Unused

  local -A colours
  colours['DEBUG']='\033[34m'  # Blue
  colours['INFO']='\033[32m'   # Green
  colours['NOTICE']=''         # Unused
  colours['WARN']='\033[33m'   # Yellow
  colours['ERROR']='\033[31m'  # Red
  colours['CRIT']=''           # Unused
  colours['ALERT']=''          # Unused
  colours['EMERG']=''          # Unused
  colours['DEFAULT']='\033[0m' # Default

  local pid="${$}"
  local level="${1^^}"
  local message="${2}"
  local date="$(date +%Y-%m-%dT%H:%M:%S%z)"

  local norm="${colours['DEFAULT']}"
  local colour="${colours[${level}]:-\033[31m}"

  local std_line="${colour}${date} [${level}] ${message}${norm}"

  case "${level}" in
    'INFO'|'WARN')
      echo -e "${std_line}"
      ;;
    'DEBUG')
      if [ "${debug_level}" -gt 0 ]; then
        echo -e "${std_line}"
      fi
      ;;
    'error')
      echo -e "${std_line}" >&2
      ;;
    *)
      log 'error' "Undefined log level trying to log: ${@}"
      ;;
  esac
}

# Returns a help message
help() {
  echo "
Perry is a simple Pair Programming CLI tool for distributed teams

USAGE:
  perry <command>

COMMANDS:
  finish        Ends a pair programming session removing branches
  load          Loads a pair programming session with given session id
  save          Store local changes to pair programming session branch
  start         Starts a new pair programming session
  sync          Synchronizes the pair programming session using remote
  "
}

# Starts pair session
start() {
  session_uuid="$(uuidgen)"

  # save progress to stash
  pair_session="pair-session-${session_uuid}"
  git stash save --quiet --no-keep-index --include-untracked "$pair_session"

  # getting the current branch name
  current_branch="$(git rev-parse --abbrev-ref HEAD)"

  # creating a new working pair branch
  pair_branch="pair-${session_uuid}"
  git checkout --quiet "$default_branch"
  git pull origin --quiet "$default_branch"
  git checkout --quiet -b "$pair_branch"

  # applying the stashed changes
  stash_id=$(git stash list | grep "$pair_session" | cut -d":" -f1)
  git stash pop --quiet $stash_id

  # create remote pair session branch
  save
}

# Loads a pair session for a given a session uuid
load() {
  local session_uuid="$1"

  # fetch all remote branchs
  git fetch --all --quiet

  # checkout pair session branch
  pair_branch="pair-${session_uuid}"
  git checkout --quiet "$pair_branch"
  git pull origin --quiet "$pair_branch"
}

# Sync you local pair branch with remote WIP changes
sync() {
  session_uuid="$(git rev-parse --abbrev-ref HEAD | sed -e 's/pair-//')"

  # save progress to stash
  pair_session="pair-session-local-${session_uuid}"
  git stash save --quiet --no-keep-index --include-untracked "$pair_session"
  log 'info' "Local changes saved at '${pair_session}' stash"

  # sync pair session branch
  pair_branch="pair-${session_uuid}"
  git fetch --all --quiet
  git pull origin --quiet "$pair_branch"

  # undo last wip saved state (to be safe)
  git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1
}

# Save current work in progress to change pair driver
save() {
  session_uuid="$(git rev-parse --abbrev-ref HEAD | sed -e 's/pair-//')"

  pair_branch="pair-${session_uuid}"
  git pull origin --quiet "$default_branch"

  # undo last wip saved state (to be safe)
  git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1

  # prepare a new wip state
  git add -A
  git rm $(git ls-files --deleted) 2>/dev/null
  git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"

  # save wip state to git repo
  git push --force --quiet origin "$pair_branch"

  # undo last wip saved state again
  git log -n 1 | grep -q -c "\-\-wip\-\-" && git reset HEAD~1
  log 'info' "Pair session WIP synced at branch ${pair_branch}"
}

# Finish the current pair session
finish() {
  session_uuid="$(git rev-parse --abbrev-ref HEAD | sed -e 's/pair-//')"

  # go to default branch
  git checkout "$default_branch"

  # remove the pair branch
  pair_branch="pair-${session_uuid}"
  git branch -D "$pair_branch"

  # delete remote branch
  git push --delete origin "$pair_branch"
  log 'info' "Pair session ${session_uuid} are finished. Good work!"
}

# show help if no command given
if [ -z "$@" ]; then
  help
  exit 1
fi

# execute command
log 'debug' "executing command 'perry $*'"
$*
